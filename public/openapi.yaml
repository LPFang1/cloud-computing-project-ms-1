openapi: 3.0.3
info:
  title: MS1 - Customer Service API
  version: 1.0.0
  description: |
    Customer onboarding and profile management service.
    Endpoints for creating, searching, updating and deleting customers.
servers:
  - url: http://localhost:3000
    description: Local development server
paths:
  /api/health:
    get:
      summary: Service health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
  /api/customers:
    get:
      summary: Search customers
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Free-text search across name/email/nationalId
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of customers (paginated)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
    post:
      summary: Create customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreate'
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  payload:
                    $ref: '#/components/schemas/Customer'
  /api/customers/by-national-id/{nationalId}:
    get:
      summary: Get customer by national ID
      parameters:
        - in: path
          name: nationalId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
  /api/customers/{id}:
    get:
      summary: Get customer by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid parameters
    put:
      summary: Update customer
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdate'
      responses:
        '200':
          description: Updated customer
    delete:
      summary: Delete (soft) customer
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deactivated response
  /api/customers/{id}/accounts:
    get:
      summary: Get accounts for customer (calls MS2)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Accounts list
  /api/customers/{id}/documents:
    post:
      summary: Add KYC document for a customer
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                filename:
                  type: string
      responses:
        '200':
          description: Document added
components:
  schemas:
    Address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        country:
          type: string
        postalCode:
          type: string
    Customer:
      type: object
      properties:
        _id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        nationalId:
          type: string
        status:
          type: string
        complianceStatus:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        createdAt:
          type: string
        updatedAt:
          type: string
    CustomerCreate:
      type: object
      required: [firstName, lastName, email]
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        nationalId:
          type: string
        status:
          type: string
        address:
          $ref: '#/components/schemas/Address'
    CustomerUpdate:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        status:
          type: string
        address:
          $ref: '#/components/schemas/Address'
